Programa principal:
    
    Enquanto current_node != target
        next_node <- calculate_next_node(G, current_node, target)
        current_node <- next_node
        cost <- cost + peso_do_no(G, current_node)
        path.adicionar(current_node)

Função calculate_next_node(G, current_node, target):
    neighbors <- vizinhos(G, current_node)
    Se neighbors for vazio:
        Retornar None
    
    lowest_cost = infinito
    best_node = None

    Para node em neighbors:
        cost <- distance_from_target(G, current_node, target, node)
        Se cost < lowest_cost
            lowest_cost <- cost
            best_node <- node

    Retornar best_node

Função distance_from_target(G, current_node, target, node):
    distance <- |node(x) - target(x)| + |node(y) - target(y)|
    wight <- peso_da_aresta(G, current_node, node)
    Retornar distance + weight
